<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xyaneon.Games.Cards</name>
    </assembly>
    <members>
        <member name="T:Xyaneon.Games.Cards.Card">
            <summary>
            Base class representation of a playing card.
            Cannot be directly instantiated.
            </summary>
        </member>
        <member name="T:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1">
            <summary>
            A default shuffling algorithm for cards.
            </summary>
            <typeparam name="TCard">
            The <see cref="T:System.Type"/> of cards this algorithm will be used to shuffle.
            </typeparam>
        </member>
        <member name="M:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1.Shuffle(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Shuffles the provided collection of cards and returns them in a new
            <see cref="T:System.Collections.Generic.IList`1"/> indicating the shuffled order.
            </summary>
            <param name="cards">
            The collection of cards to shuffle.
            </param>
            <returns>
            A new list containing the supplied <paramref name="cards"/>
            in shuffled order.
            </returns>
        </member>
        <member name="T:Xyaneon.Games.Cards.DrawPile`1">
            <summary>
            A collection of cards which can be drawn from.
            </summary>
            <typeparam name="TCard">
            The type of cards stored in this draw pile.
            Must inherit from the <see cref="T:Xyaneon.Games.Cards.Card"/> class.
            </typeparam>
            <remarks>
            This class provides a concrete implementation of the
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> interface.
            </remarks>
            <seealso cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> class
            using the provided visibility.
            </summary>
            <param name="isFaceUp">
            A value indicating whether this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>
            is supposed to be face-up (<see langword="true"/>) or face-down
            (<see langword="false"/>).
            </param>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> class
            using the provided collection of cards and visibility.
            </summary>
            <param name="cards">
            The collection of cards initially present in this draw pile.
            </param>
            <param name="isFaceUp">
            A value indicating whether this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>
            is supposed to be face-up (<see langword="true"/>) or face-down
            (<see langword="false"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cards"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Xyaneon.Games.Cards.DrawPile`1.Cards">
            <summary>
            Gets a read-only view of the cards currently in this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </summary>
        </member>
        <member name="P:Xyaneon.Games.Cards.DrawPile`1.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>
            is currently empty.
            </summary>
        </member>
        <member name="P:Xyaneon.Games.Cards.DrawPile`1.IsFaceUp">
            <summary>
            Gets a value indicating whether this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>
            is supposed to be face-up (<see langword="true"/>) or face-down
            (<see langword="false"/>).
            </summary>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.Draw">
            <summary>
            Draws a single <see cref="T:Xyaneon.Games.Cards.Card"/> from the top of this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> and returns it.
            </summary>
            <returns>
            The <see cref="T:Xyaneon.Games.Cards.Card"/> which was at the top of this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The draw pile is empty.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.Draw(System.Int32)">
            <summary>
            Draws the specified number of cards from this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </summary>
            <param name="count">
            The number of cards to draw.
            </param>
            <returns>
            The drawn cards in the order in which they were drawn.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> exceeds the current number of cards stored
            in this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.DrawAll">
            <summary>
            Draws all cards from this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </summary>
            <returns>
            The drawn cards in the order in which they were drawn.
            </returns>
            <remarks>
            After this method is called, this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>
            will be empty.
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.DrawAtMost(System.Int32)">
            <summary>
            Draws the specified number of cards from this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> if able, or all of the cards in this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> if the current number of cards it
            currently holds is less than that.
            </summary>
            <param name="count">
            The maximum number of cards to draw.
            </param>
            <returns>
            The drawn cards in the order in which they were drawn. If this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> is empty at the time of the call,
            then the returned collection will also be empty.
            </returns>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a single <see cref="T:Xyaneon.Games.Cards.Card"/> into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> at the specified
            <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index where the <paramref name="card"/> should be
            inserted at.
            </param>
            <param name="card">
            The <see cref="T:Xyaneon.Games.Cards.Card"/> to insert.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="card"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than this object's current
            number of cards.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.PlaceAtBottom(`0)">
            <summary>
            Places a single <see cref="T:Xyaneon.Games.Cards.Card"/> at the bottom of this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </summary>
            <param name="card">
            The <see cref="T:Xyaneon.Games.Cards.Card"/> to place at the bottom.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="card"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.PlaceOnTop(`0)">
            <summary>
            Places a single <see cref="T:Xyaneon.Games.Cards.Card"/> on top of this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </summary>
            <param name="card">
            The <see cref="T:Xyaneon.Games.Cards.Card"/> to place on top.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="card"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.Shuffle">
            <summary>
            Shuffles all of the cards in this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>
            using a default shuffling algorithm.
            </summary>
            <remarks>
            This method will use the shuffling algorithm provided by the
            <see cref="T:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1"/>. If you want to use
            a custom shuffling method instead, then consider using the
            <see cref="M:Xyaneon.Games.Cards.DrawPile`1.Shuffle(Xyaneon.Games.Cards.IShuffleAlgorithm{`0})"/> overload method.
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.Shuffle(Xyaneon.Games.Cards.IShuffleAlgorithm{`0})">
            <summary>
            Shuffles all of the cards in this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>
            using the supplied shuffling algorithm.
            </summary>
            <param name="shuffleAlgorithm">
            The object providing the shuffling algorithm to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shuffleAlgorithm"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.ShuffleIn(Xyaneon.Games.Cards.IDrawPile{`0})">
            <summary>
            Shuffles the provided draw pile into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> using a default shuffling algorithm.
            </summary>
            <param name="other">
            The other <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="other"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
            This method will use the shuffling algorithm provided by the
            <see cref="T:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1"/>. If you want to use
            a custom shuffling method instead, then consider using the
            <see cref="M:Xyaneon.Games.Cards.DrawPile`1.ShuffleIn(System.Collections.Generic.IEnumerable{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})"/>
            overload method.
            </para>
            <para>
            <paramref name="other"/> will be emptied of all of its cards as a
            result of calling this algorithm.
            </para>
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.ShuffleIn(Xyaneon.Games.Cards.IDrawPile{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})">
            <summary>
            Shuffles the provided draw pile into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> using the supplied shuffling
            algorithm.
            </summary>
            <param name="other">
            The <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </param>
            <param name="shuffleAlgorithm">
            The object providing the shuffling algorithm to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="other"/> is <see langword="null"/>.
            -or-
            <paramref name="shuffleAlgorithm"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
            <paramref name="other"/> will be emptied of all of its cards as a
            result of calling this algorithm.
            </para>
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.ShuffleIn(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Shuffles the provided <paramref name="cards"/> into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> using a default shuffling algorithm.
            </summary>
            <param name="cards">
            The collection of cards to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cards"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method will use the shuffling algorithm provided by the
            <see cref="T:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1"/>. If you want to use
            a custom shuffling method instead, then consider using the
            <see cref="M:Xyaneon.Games.Cards.DrawPile`1.ShuffleIn(System.Collections.Generic.IEnumerable{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})"/>
            overload method.
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.ShuffleIn(System.Collections.Generic.IEnumerable{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})">
            <summary>
            Shuffles the provided <paramref name="cards"/> into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> using the supplied shuffling
            algorithm.
            </summary>
            <param name="cards">
            The collection of cards to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </param>
            <param name="shuffleAlgorithm">
            The object providing the shuffling algorithm to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cards"/> is <see langword="null"/>.
            -or-
            <paramref name="shuffleAlgorithm"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="F:Xyaneon.Games.Cards.DrawPile`1._cards">
            <summary>
            Private backing field for the <see cref="P:Xyaneon.Games.Cards.DrawPile`1.Cards"/> property.
            </summary>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.ShuffleBase(Xyaneon.Games.Cards.IShuffleAlgorithm{`0})">
            <summary>
            The base method for shuffling the cards stored in this object.
            The <paramref name="shuffleAlgorithm"/> must always be specified.
            </summary>
            <param name="shuffleAlgorithm">
            The object providing the shuffling algorithm to use.
            </param>
            <remarks>
            <para>
            This method assumes that the <paramref name="shuffleAlgorithm"/>
            parameter supplied was already checked to not be
            <see langword="null"/> by the caller.
            </para>
            <para>
            The <paramref name="shuffleAlgorithm"/> supplied can just be the
            <see cref="T:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1"/> class defined in this
            library for default behavior, such as when called by the public
            <see cref="M:Xyaneon.Games.Cards.DrawPile`1.Shuffle"/> method. However, an alternative can be
            supplied when needed.
            </para>
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.ShuffleInBase(Xyaneon.Games.Cards.IDrawPile{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})">
            <summary>
            The base method for shuffling the supplied draw pile
            into this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>. The
            <paramref name="shuffleAlgorithm"/> must always be specified.
            </summary>
            <param name="other">
            The other <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </param>
            <param name="shuffleAlgorithm">
            The object providing the shuffling algorithm to use.
            </param>
            <remarks>
            <para>
            This method assumes that the parameters supplied were already
            checked to not be <see langword="null"/> by the caller.
            </para>
            <para>
            The <paramref name="shuffleAlgorithm"/> supplied can just be the
            <see cref="T:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1"/> class defined in this
            library for default behavior, such as when called by the public
            <see cref="M:Xyaneon.Games.Cards.DrawPile`1.Shuffle"/> method. However, an alternative can be
            supplied when needed.
            </para>
            <para>
            <paramref name="other"/> will be emptied of all of its cards as a
            result of calling this algorithm.
            </para>
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.DrawPile`1.ShuffleInBase(System.Collections.Generic.IEnumerable{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})">
            <summary>
            The base method for shuffling the supplied <paramref name="cards"/>
            into this <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>. The
            <paramref name="shuffleAlgorithm"/> must always be specified.
            </summary>
            <param name="cards">
            The collection of cards to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/>.
            </param>
            <param name="shuffleAlgorithm">
            The object providing the shuffling algorithm to use.
            </param>
            <remarks>
            <para>
            This method assumes that the parameters supplied were already
            checked to not be <see langword="null"/> by the caller.
            </para>
            <para>
            The <paramref name="shuffleAlgorithm"/> supplied can just be the
            <see cref="T:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1"/> class defined in this
            library for default behavior, such as when called by the public
            <see cref="M:Xyaneon.Games.Cards.DrawPile`1.Shuffle"/> method. However, an alternative can be
            supplied when needed.
            </para>
            </remarks>
        </member>
        <member name="T:Xyaneon.Games.Cards.IDrawPile`1">
            <summary>
            Represents a collection of cards which can be drawn from.
            </summary>
            <typeparam name="TCard">
            The type of cards stored in this draw pile.
            Must inherit from the <see cref="T:Xyaneon.Games.Cards.Card"/> class.
            </typeparam>
        </member>
        <member name="P:Xyaneon.Games.Cards.IDrawPile`1.Cards">
            <summary>
            Gets a read-only view of the cards currently in this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </summary>
        </member>
        <member name="P:Xyaneon.Games.Cards.IDrawPile`1.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>
            is currently empty.
            </summary>
        </member>
        <member name="P:Xyaneon.Games.Cards.IDrawPile`1.IsFaceUp">
            <summary>
            Gets a value indicating whether this <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>
            is supposed to be face-up (<see langword="true"/>) or face-down
            (<see langword="false"/>).
            </summary>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.Draw">
            <summary>
            Draws a single <see cref="T:Xyaneon.Games.Cards.Card"/> from the top of this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> and returns it.
            </summary>
            <returns>
            The <see cref="T:Xyaneon.Games.Cards.Card"/> which was at the top of this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The draw pile is empty.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.Draw(System.Int32)">
            <summary>
            Draws the specified number of cards from this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </summary>
            <param name="count">
            The number of cards to draw.
            </param>
            <returns>
            The drawn cards in the order in which they were drawn.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> exceeds the current number of cards stored
            in this <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.DrawAll">
            <summary>
            Draws all cards from this <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </summary>
            <returns>
            The drawn cards in the order in which they were drawn.
            </returns>
            <remarks>
            After this method is called, this <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>
            will be empty.
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.DrawAtMost(System.Int32)">
            <summary>
            Draws the specified number of cards from this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> if able, or all of the cards in this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> if the current number of cards it
            currently holds is less than that.
            </summary>
            <param name="count">
            The maximum number of cards to draw.
            </param>
            <returns>
            The drawn cards in the order in which they were drawn. If this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> is empty at the time of the call,
            then the returned collection will also be empty.
            </returns>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a single <see cref="T:Xyaneon.Games.Cards.Card"/> into this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> at the specified
            <paramref name="index"/>.
            </summary>
            <param name="index">
            The zero-based index where the <paramref name="card"/> should be
            inserted at.
            </param>
            <param name="card">
            The <see cref="T:Xyaneon.Games.Cards.Card"/> to insert.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="card"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than this object's current
            number of cards.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.PlaceAtBottom(`0)">
            <summary>
            Places a single <see cref="T:Xyaneon.Games.Cards.Card"/> at the bottom of this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </summary>
            <param name="card">
            The <see cref="T:Xyaneon.Games.Cards.Card"/> to place at the bottom.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="card"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.PlaceOnTop(`0)">
            <summary>
            Places a single <see cref="T:Xyaneon.Games.Cards.Card"/> on top of this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </summary>
            <param name="card">
            The <see cref="T:Xyaneon.Games.Cards.Card"/> to place on top.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="card"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.Shuffle">
            <summary>
            Shuffles all of the cards in this <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>
            using a default shuffling algorithm.
            </summary>
            <remarks>
            If you want to use a custom shuffling method instead, then consider
            using the <see cref="M:Xyaneon.Games.Cards.IDrawPile`1.Shuffle(Xyaneon.Games.Cards.IShuffleAlgorithm{`0})"/> overload
            method.
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.Shuffle(Xyaneon.Games.Cards.IShuffleAlgorithm{`0})">
            <summary>
            Shuffles all of the cards in this <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>
            using the supplied shuffling algorithm.
            </summary>
            <param name="shuffleAlgorithm">
            The object providing the shuffling algorithm to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shuffleAlgorithm"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.ShuffleIn(Xyaneon.Games.Cards.IDrawPile{`0})">
            <summary>
            Shuffles the provided draw pile into this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> using a default shuffling algorithm.
            </summary>
            <param name="other">
            The other <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="other"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
            This method will use the shuffling algorithm provided by the
            <see cref="T:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1"/>. If you want to use
            a custom shuffling method instead, then consider using the
            <see cref="M:Xyaneon.Games.Cards.IDrawPile`1.ShuffleIn(System.Collections.Generic.IEnumerable{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})"/>
            overload method.
            </para>
            <para>
            <paramref name="other"/> will be emptied of all of its cards as a
            result of calling this algorithm.
            </para>
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.ShuffleIn(Xyaneon.Games.Cards.IDrawPile{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})">
            <summary>
            Shuffles the provided draw pile into this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> using the supplied shuffling
            algorithm.
            </summary>
            <param name="other">
            The <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </param>
            <param name="shuffleAlgorithm">
            The object providing the shuffling algorithm to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="other"/> is <see langword="null"/>.
            -or-
            <paramref name="shuffleAlgorithm"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
            <paramref name="other"/> will be emptied of all of its cards as a
            result of calling this algorithm.
            </para>
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.ShuffleIn(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Shuffles the provided <paramref name="cards"/> into this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> using a default shuffling algorithm.
            </summary>
            <param name="cards">
            The collection of cards to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cards"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method will use the shuffling algorithm provided by the
            <see cref="T:Xyaneon.Games.Cards.DefaultShuffleAlgorithm`1"/>. If you want to use
            a custom shuffling method instead, then consider using the
            <see cref="M:Xyaneon.Games.Cards.IDrawPile`1.ShuffleIn(System.Collections.Generic.IEnumerable{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})"/>
            overload method.
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.IDrawPile`1.ShuffleIn(System.Collections.Generic.IEnumerable{`0},Xyaneon.Games.Cards.IShuffleAlgorithm{`0})">
            <summary>
            Shuffles the provided <paramref name="cards"/> into this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/> using the supplied shuffling
            algorithm.
            </summary>
            <param name="cards">
            The collection of cards to shuffle into this
            <see cref="T:Xyaneon.Games.Cards.IDrawPile`1"/>.
            </param>
            <param name="shuffleAlgorithm">
            The object providing the shuffling algorithm to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cards"/> is <see langword="null"/>.
            -or-
            <paramref name="shuffleAlgorithm"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Xyaneon.Games.Cards.IShuffleAlgorithm`1">
            <summary>
            Interface for classes which can be used for shuffling cards.
            </summary>
            <typeparam name="TCard">
            The <see cref="T:System.Type"/> of cards this algorithm will be used to shuffle.
            </typeparam>
        </member>
        <member name="M:Xyaneon.Games.Cards.IShuffleAlgorithm`1.Shuffle(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Shuffles the provided collection of cards and returns them in a new
            <see cref="T:System.Collections.Generic.IList`1"/> indicating the shuffled order.
            </summary>
            <param name="cards">
            The collection of cards to shuffle.
            </param>
            <returns>
            A new list containing the supplied <paramref name="cards"/>
            in shuffled order.
            </returns>
        </member>
        <member name="T:Xyaneon.Games.Cards.StandardPlayingCards.Joker">
            <summary>
            A joker card from a standard 52-card deck.
            </summary>
            <remarks>
            <para>
            In this implementation, the joker is considered to have no suit and no
            rank.
            </para>
            <para>
            More information about the joker can be found here:
            https://en.wikipedia.org/wiki/Joker_(playing_card)
            </para>
            </remarks>
            <seealso cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>
            <seealso cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCardDeck"/>
        </member>
        <member name="M:Xyaneon.Games.Cards.StandardPlayingCards.Joker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Joker"/> class.
            </summary>
        </member>
        <member name="T:Xyaneon.Games.Cards.StandardPlayingCards.Rank">
            <summary>
            Indicates the rank of a standard playing card.
            </summary>
            <seealso cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Suit"/>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.None">
            <summary>
            Indicates that a card has no rank (such as a joker).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Ace">
            <summary>
            Indicates that the card is an ace (A).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Two">
            <summary>
            Indicates that the card is a two (2).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Three">
            <summary>
            Indicates that the card is a three (3).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Four">
            <summary>
            Indicates that the card is a four (4).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Five">
            <summary>
            Indicates that the card is a five (5).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Six">
            <summary>
            Indicates that the card is a six (6).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Seven">
            <summary>
            Indicates that the card is a seven (7).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Eight">
            <summary>
            Indicates that the card is an eight (8).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Nine">
            <summary>
            Indicates that the card is a nine (9).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Ten">
            <summary>
            Indicates that the card is a ten (10).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Jack">
            <summary>
            Indicates that the card is a jack (J).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.Queen">
            <summary>
            Indicates that the card is a queen (Q).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Rank.King">
            <summary>
            Indicates that the card is a king (K).
            </summary>
        </member>
        <member name="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard">
            <summary>
            A card from a standard 52-card deck.
            </summary>
            <remarks>
            More information about a standard 52-card deck can be found here:
            https://en.wikipedia.org/wiki/Standard_52-card_deck
            </remarks>
            <seealso cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Rank"/>
            <seealso cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Suit"/>
            <seealso cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCardDeck"/>
        </member>
        <member name="M:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard.#ctor(Xyaneon.Games.Cards.StandardPlayingCards.Rank,Xyaneon.Games.Cards.StandardPlayingCards.Suit)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/> class using the provided rank
            and suit.
            </summary>
            <param name="rank">
            The <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Rank"/> of the card.
            </param>
            <param name="suit">
            The <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Suit"/> of the card.
            </param>
        </member>
        <member name="M:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard.Equals(Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard)">
            <summary>
            Indicates whether the current <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>
            is equal to another <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>.
            </summary>
            <param name="other">
            The <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/> to compare with this
            object.
            </param>
            <returns>
            <see langword="true"/> if the other
            <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/> is equal to this
            <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>; otherwise,
            <see langword="false"/>.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="P:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard.Rank">
            <summary>
            Gets the <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Rank"/> of this card.
            </summary>
        </member>
        <member name="P:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard.Suit">
            <summary>
            Gets the <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Suit"/> of this card.
            </summary>
        </member>
        <member name="M:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to
            this <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>.
            </summary>
            <param name="obj">
            The object to compare to the current
            <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified object is equal to
            this <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard.GetHashCode">
            <summary>
            Gets a hash code for this <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>.
            </summary>
            <returns>
            A a hash code for the current <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard.op_Equality(Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard,Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard)">
            <summary>
            Determines whether two <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>
            instances are equal to each other.
            </summary>
            <param name="card1">
            The <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/> on the left hand of the
            expression.
            </param>
            <param name="card2">
            The <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="card1"/> is equal to
            <paramref name="card2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard.op_Inequality(Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard,Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard)">
            <summary>
            Determines whether two <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>
            instances are not equal to each other.
            </summary>
            <param name="card1">
            The <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/> on the left hand of the
            expression.
            </param>
            <param name="card2">
            The <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="card1"/> is not equal to
            <paramref name="card2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCardDeck">
            <summary>
            A deck containing standard playing cards.
            </summary>
            <seealso cref="T:Xyaneon.Games.Cards.DrawPile`1"/>
            <seealso cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/>
        </member>
        <member name="M:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCardDeck.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCardDeck"/> class, containing all 52
            standard playing cards and the specified number of jokers.
            </summary>
            <param name="isFaceUp">
            A value indicating whether this
            <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCardDeck"/> is supposed to be face-up
            (<see langword="true"/>) or face-down (<see langword="false"/>).
            </param>
            <param name="numberOfJokers">
            The number of <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Joker"/> cards this
            <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCardDeck"/> should also contain. This
            parameter is zero by default.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfJokers"/> is less than zero.
            </exception>
            <remarks>
            This constructor creates a deck which is pre-populated with all of
            the cards typically found in a standard 52-card deck, plus any
            specified <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Joker"/> cards. If you instead need a deck
            which can hold <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCard"/> objects but is
            initialized to contain something else or nothing at all, then
            consider using the <see cref="T:Xyaneon.Games.Cards.DrawPile`1"/> base class
            instead.
            </remarks>
        </member>
        <member name="M:Xyaneon.Games.Cards.StandardPlayingCards.StandardPlayingCardDeck.Create52StandardPlayingCards(System.Int32)">
            <summary>
            Creates and returns the 52 cards found in a standard playing card
            deck as an enumerable collection.
            </summary>
            <param name="numberOfJokers">
            The number of <see cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Joker"/> cards the enumerable collection
            should also contain. This parameter is zero by default.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all of the cards
            typically found in a standard playing card deck.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfJokers"/> is less than zero.
            </exception>
        </member>
        <member name="T:Xyaneon.Games.Cards.StandardPlayingCards.Suit">
            <summary>
            Indicates the suit of a standard playing card.
            </summary>
            <seealso cref="T:Xyaneon.Games.Cards.StandardPlayingCards.Rank"/>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Suit.None">
            <summary>
            Indicates that a card has no suit (such as a joker).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Suit.Clubs">
            <summary>
            Indicates that a card's suit is clubs (♣).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Suit.Diamonds">
            <summary>
            Indicates that a card's suit is diamonds (♦).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Suit.Hearts">
            <summary>
            Indicates that a card's suit is hearts (♥).
            </summary>
        </member>
        <member name="F:Xyaneon.Games.Cards.StandardPlayingCards.Suit.Spades">
            <summary>
            Indicates that a card's suit is spades (♠).
            </summary>
        </member>
    </members>
</doc>
